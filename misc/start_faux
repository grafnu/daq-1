#!/bin/bash

echo Starting faux device at `date` with $*

declare -A options
for option in $*; do
    options[$option]=$option
done

# Disable docker's built-in resolv mechanism and install standard resolvconf.
# Do this at runtime since it requires permissions that aren't availble at build.
umount /etc/resolv.conf
dpkg -i resolvconf_*.deb

while ! ifconfig -a | fgrep -q BROADCAST; do
    echo Waiting for container interface to exist...
    sleep 1
done

intf_name=$(ip link | fgrep BROADCAST | sed -rn 's/^[0-9]+: ([-a-zA-Z0-9]+).*$/\1/p')
if [ -n "$intf_name" ]; then
    echo Local interface is $intf_name
else
    echo Local interface not found.
    exit 1
fi

# Setup change-of-mac address for macoui testing.
if [ -n "${options[macoui]}" ]; then
    new_mac=3c:5a:b4:1e:8f:0a
    echo Setting alternate mac $new_mac on $intf_name
    ip link set addr $new_mac dev $intf_name
fi

# To capture all the data in/out of the faux device for debugging, uncomment
# the following lines. The pcap file will end up in inst/faux/{hostname}.pcap
# on the DAQ controller.
#echo Starting pcap capture...
#tcpdump -nUi $intf_name -w /tmp/`hostname`.pcap &

ip addr show $intf_name

if [ -n "${options[xdhcp]}" ]; then
    echo Assigning static ip address...
    ip link set up dev $intf_name
    ip addr add 10.20.0.5/16 dev $intf_name broadcast 10.20.255.255
    ip addr show $intf_name
else
    echo Running dhclient...
    dhclient -v
    ip addr show $intf_name

    # dhclient relies on systemd to update resolv.conf -- but this setup does
    # not use systemd, so get all hacky and update manually.
    function update_dns {
        dhcp_dns=$(fgrep DNS= /run/systemd/resolved.conf.d/isc-dhcp-v4-$intf_name.conf)
        echo nameserver ${dhcp_dns#DNS=} > /tmp/resolv.conf
        if ! diff /tmp/resolv.conf /etc/resolv.conf; then
            echo Updating resolv.conf with $dhcp_dns
            cp /tmp/resolv.conf /etc/resolv.conf
        fi
    }

    # Need to do periodically for when DHCP address changes.
    (while true; do update_dns; sleep 30; done) &
fi

# Pick the one not-lo inet v4 address.
ipline=$(ip addr show | fgrep "inet " | fgrep -v 127.0.0.1)
read -r -a parts <<< "$ipline"
local_ip=${parts[1]%/*}
broadcast_ip=${parts[3]}

echo Faux device at $local_ip bcast $broadcast_ip

# Setup dummy telnet listener to trigger port-scan failure
if [ -n "${options[telnet]}" ]; then
    echo Enabling mock telnet server...
    (while true; do echo Telnet `hostname`; nc -nvlt -p 23 -e `which hostname`; done) &
fi

if [ -n "${options[bacnet]}" ]; then
    echo Starting bacnet loop device.
    java -cp bacnetTests/build/libs/bacnet-1.0-SNAPSHOT-all.jar \
         FauxDeviceEngine.EntryPoint $local_ip $broadcast_ip "Faux-Device-Pass.json"  &
elif [ -n "${options[bacnetfail]}" ]; then
    echo Starting bacnet loop device.
    java -cp bacnetTests/build/libs/bacnet-1.0-SNAPSHOT-all.jar \
         FauxDeviceEngine.EntryPoint $local_ip $broadcast_ip "Faux-Device-Fail.json"  &
fi

if [ -n "${options[ntp_client]}" ]; then
    echo Starting ntp client.
    java -jar NTPClient/build/libs/NTPClient-1.0-SNAPSHOT.jar "time.google.com" "123" "3" &
fi

cip_port=41794
multicast_group="224.1.1.1"
duration_seconds=360
cycle_seconds=20

if [ -n "${options[broadcast_client]}" ]; then
    echo Starting broatcast client.
    python TransportClient/client.py $broadcast_ip $cip_port broadcast $duration_seconds $cycle_seconds &
fi

#if [ -n "${options[multicast_client]}" ]; then
#    echo Starting multicast client.
#    python TransportClient/client.py $multicast_group $cip_port multicast #$duration_seconds $cycle_seconds &
#fi

if [ -n "${options[discover]}" ]; then
    echo Starting bacnet discover loop.
    bin/bacnet_discover loop &
fi

if [ -n "${options[curl]}" ]; then
    echo Starting curl loop.
    (while true; do curl -o - http://google.com; sleep 1; done) &
fi

if [ -n "${options[brute]}" ]; then
    echo Starting brute server.
    (python pentests/brute_server.py bad 10000; echo Brute done.) &
elif [ -n "${options[nobrute]}" ]; then
    echo Starting nobrute server.
    (python pentests/brute_server.py good 10000; echo Brute done.) &
fi

if [ -n "${options[tls]}" ]; then
    echo Generating tls certs.
    python tlsfaux/generate_certs.py
    echo Starting tls server on port 443 https.
    python tlsfaux/server.py certs &
elif [ -n "${options[expiredtls]}" ]; then
    echo Starting expired tls server on port 443 https.
    python tlsfaux/server.py expcerts &
fi

if [ -n "${options[pubber]}" ]; then
    echo Running cloud pubber tool...
    (while date; do pubber/bin/run; sleep 30; done) &
fi

conf_file=/config/start/start_faux.sh
if [ -f $conf_file ]; then
    echo Loading $conf_file...
    source $conf_file
else
    echo Runtime config $conf_file not found.
fi

cat <<EOF >> variables.debug
bac0_port= $bac0_port
multicast_group= $multicast_group
duration_seconds= $duration_seconds
local_ip= $local_ip
broadcast_ip= $broadcast_ip
intf_name= $intf_name
conf_file= $conf_file
EOF

echo Blocking for all eternety.
tail -f /dev/null
