#!/bin/bash

echo Starting faux device at `date` with $*

declare -A options
for option in $*; do
    options[$option]=$option
done

# Disable docker's built-in resolv mechanism and install standard resolvconf.
# Do this at runtime since it requires permissions that aren't availble at build.
umount /etc/resolv.conf
dpkg -i resolvconf_*.deb

while ! ifconfig -a | fgrep -q BROADCAST; do
    echo Waiting for container interface to exist...
    sleep 1
done

intf_name=$(ip link | fgrep BROADCAST | sed -rn 's/^.* ([-a-z0-9]+).*$/\1/p')
if [ -n "$intf_name" ]; then
    echo Local interface is $intf_name
else
    echo Local interface not found.
    exit 1
fi

# To capture all the data in/out of the faux device for debugging, uncomment
# the following lines. The pcap file will end up in inst/faux/{hostname}.pcap
# on the DAQ controller.
#echo Starting pcap capture...
#tcpdump -nUi $intf_name -w /tmp/`hostname`.pcap &

ip addr show $intf_name

if [ -n "${options[xdhcp]}" ]; then
    echo Assigning static ip address...
    ip link set up dev $intf_name
    ip addr add 10.20.0.5/8 dev $intf_name
    ip addr show $intf_name
else
    echo Running dhclient...
    dhclient -v
    ip addr show $intf_name

    # dhclient relies on systemd to update resolv.conf -- but this setup does
    # not use systemd, so get all hacky and update manually.
    dhcp_dns=$(fgrep DNS= /run/systemd/resolved.conf.d/isc-dhcp-v4-$intf_name.conf)
    echo Updating resolv.conf with $dhcp_dns
    echo nameserver ${dhcp_dns#DNS=} > /etc/resolv.conf
fi

# Pick the one not-lo inet v4 address.
ipline=$(ip addr show | fgrep "inet " | fgrep -v 127.0.0.1)
read -r -a parts <<< "$ipline"
local_ip=${parts[1]%/*}
broadcast_ip=${parts[3]}

echo Faux device at $local_ip bcast $broadcast_ip

# Setup dummy telnet listener to trigger port-scan failure
if [ -n "${options[telnet]}" ]; then
    echo Enabling mock telnet server...
    (while true; do echo Telnet `hostname`; nc -nvlt -p 23 -e `which hostname`; done) &
fi

# Setup dummy https listener to trigger port-scan failure
if [ -n "${options[https]}" ]; then
    echo Enabling mock https server...
    (while true; do echo https`hostname`; nc -nvlt -p 443 -e `which hostname`; done) &
fi

if [ -n "${options[bacnet]}" ]; then
    echo Starting bacnet loop device.
    java -cp bacnet4j/bacnet4j-1.0-SNAPSHOT-all.jar \
         com.serotonin.bacnet4j.test.LoopDevice $local_ip $broadcast_ip &
fi

if [ -n "${options[discover]}" ]; then
    echo Starting bacnet discover loop.
    bin/bacnet_discover loop &
fi

if [ -n "${options[curl]}" ]; then
    echo Starting curl loop.
    (while true; do curl -o - http://google.com; sleep 1; done) &
fi

if [ -n "${options[brute]}" ]; then
    echo Starting brute server.
    (python pentests/brute_server.py bad 10000; echo Brute done.) &
elif [ -n "${options[nobrute]}" ]; then
    echo Starting nobrute server.
    (python pentests/brute_server.py good 10000; echo Brute done.) &
fi

conf_file=/config/start_faux.sh
if [ -f $conf_file ]; then
    echo Loading $conf_file...
    source $conf_file
else
    echo Runtime config $conf_file not found.
fi

echo Blocking for all eternety.
tail -f /dev/null
